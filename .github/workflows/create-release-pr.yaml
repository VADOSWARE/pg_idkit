name: create-release-pr

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version to release (ex. `0.1.0`)
        required: false
        type: string

concurrency:
  group: pg_idkit-create-release-pr # Project-wide
  cancel-in-progress: true

jobs:
  create-release-pr:
    permissions:
      id-token: write
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    steps:
      # Checkout the full repository history
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      # Set up caching
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8

      # Install deps
      - uses: chainguard-dev/actions/setup-gitsign@main
      - name: Install cargo-release
        uses: taiki-e/cache-cargo-install-action@5c9abe9a3f79d831011df7c47177debbeb320405 # v2.1.2
        with:
          tool: cargo-release
      - name: Install just
        uses: taiki-e/cache-cargo-install-action@5c9abe9a3f79d831011df7c47177debbeb320405 # v2.1.2
        with:
          tool: just
      - name: Install cargo-get
        uses: taiki-e/cache-cargo-install-action@5c9abe9a3f79d831011df7c47177debbeb320405 # v2.1.2
        with:
          tool: cargo-get
      - name: Install git-cliff
        uses: taiki-e/cache-cargo-install-action@5c9abe9a3f79d831011df7c47177debbeb320405 # v2.1.2
        with:
          tool: git-cliff
      - name: Install cargo-edit
        uses: taiki-e/cache-cargo-install-action@5c9abe9a3f79d831011df7c47177debbeb320405 # v2.1.2
        with:
          tool: cargo-edit

      # Prep the new version
      - name: Detect version (current or input)
        id: detect-version
        run: |
          if [ -z "${{ inputs.version || '' }}" ]; then
            echo value=$(just print-version) >> $GITHUB_OUTPUT;
          else
            echo value="${{ inputs.version }}" >> $GITHUB_OUTPUT;
          fi
      - name: Set version
        env:
          VERSION: ${{ steps.detect-version.outputs.value }}
        run: |
          just set-version $VERSION
      - name: Generate Changelog
        env:
          VERSION: ${{ steps.detect-version.outputs.value }}
        run: |
          just changelog

      # Create PR for release
      - uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
        with:
          token: ${{ secrets.RELEASE_PR_PAT }}
          signoff: true
          commit-message: |
            release: pg_idkit ${{ steps.detect-version.outputs.value }}
          title: |
            release: pg_idkit v${{ steps.detect-version.outputs.value }}
          body: |
            This is a release prep branch for `pg_idkit` release v${{ steps.detect-version.outputs.value }}.

            Upon merging, this branch will cause a tag to be placed on the commit in `main`. After the tag has been placed, a build will run that generates artifacts and publishes a release.

            Before this release is ready, here is the checklist:
              - [ ] Update `README.md` to use the newest version of Postgres, if it has changed (ex. `16.2` -> `17.0`)
              - [ ] Update `README.md` to soon-to-be-released pg_idkit (ex. `pg_idkit-0.2.0` -> `pg_idkit-0.2.1`)
              - [ ] Update `generate-rpm` configuration in `Cargo.toml` version references (ex. `--0.2.0.sql` -> `--0.2.1.sql`)
              - [ ] Update default version in `justfile`

            See CHANGELOG for changes made to this release before it goes out.
          labels: |
            release-pr
          assignees: |
            t3hmrman
          branch: prep-release-v${{ steps.detect-version.outputs.value }}
